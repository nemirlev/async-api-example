asyncapi: 3.0.0
info:
  title: Order Service API
  version: 1.0.0
  description: |
    # Order Service
    
    This service is responsible for processing orders in our system.
    
    ## Main operations
    * Creating an order
    * Updating status
    * Sending notifications
    
    ## How to use
    1. Subscribe to the `orders/created` topic to receive new orders
    2. Send updates to `orders/status`
    3. Monitor notifications in `orders/notifications`

servers:
  production:
    host: kafka.example.com:9092
    protocol: kafka
    description: Production Kafka Broker
  development:
    host: localhost:9092
    protocol: kafka
    description: Local Kafka Broker

channels:
  ordersCreated:
    address: orders/created
    messages:
      orderCreated:
        $ref: '#/components/messages/OrderCreated'
    description: |
      # Creating a new order
      
      This topic is used to publish information about new orders.
      
      ## Important
      * All amounts are specified in kopecks
      * All dates are in ISO 8601 format
      * Order ID must be unique

  ordersStatus:
    address: orders/status
    messages:
      statusChanged:
        $ref: '#/components/messages/OrderStatusChanged'
    description: |
      # Updating order status
      
      Used to track the lifecycle of an order

operations:
  sendOrder:
    action: send
    channel:
      $ref: '#/channels/ordersCreated'
    messages:
      - $ref: '#/channels/ordersCreated/messages/orderCreated'
    summary: Sending a new order
    
  sendStatus:
    action: send
    channel:
      $ref: '#/channels/ordersStatus'
    messages:
      - $ref: '#/channels/ordersStatus/messages/statusChanged'
    summary: Sending a status update

  receiveOrders:
    action: receive
    channel:
      $ref: '#/channels/ordersCreated'
    messages:
      - $ref: '#/channels/ordersCreated/messages/orderCreated'
    summary: Receiving new orders

  receiveStatusUpdates:
    action: receive
    channel:
      $ref: '#/channels/ordersStatus'
    messages:
      - $ref: '#/channels/ordersStatus/messages/statusChanged'
    summary: Receiving status updates
    
components:
  messages:
    OrderCreated:
      name: OrderCreated
      title: New Order
      contentType: application/json
      payload:
        $ref: '#/components/schemas/Order'
      examples:
        - payload:
            order_id: "12345"
            customer_id: "user789"
            items:
              - product_id: "prod123"
                quantity: 2
                price: 150000
            total_amount: 300000
            created_at: "2024-02-20T15:30:00Z"
            status: "NEW"

    OrderStatusChanged:
      name: OrderStatusChanged
      title: Order Status Changed
      contentType: application/json
      payload:
        $ref: '#/components/schemas/OrderStatus'

  schemas:
    Order:
      type: object
      description: |
        # Order Schema
        
        The main entity describing an order in the system
      properties:
        order_id:
          type: string
          description: Unique order identifier
          examples: ["12345"]
        customer_id:
          type: string
          description: Customer ID
          examples: ["user789"]
        items:
          type: array
          description: List of items in the order
          items:
            $ref: '#/components/schemas/OrderItem'
        total_amount:
          type: integer
          description: Total order amount in kopecks
          examples: [300000]
        created_at:
          type: string
          format: date-time
          description: Order creation date and time
        status:
          type: string
          enum: [NEW, PROCESSING, SHIPPED, DELIVERED, CANCELLED]
          description: Current order status
      required:
        - order_id
        - customer_id
        - items
        - total_amount
        - created_at
        - status

    OrderItem:
      type: object
      description: Order item
      properties:
        product_id:
          type: string
          description: Product ID
        quantity:
          type: integer
          minimum: 1
          description: Quantity
        price:
          type: integer
          description: Price per unit in kopecks
      required:
        - product_id
        - quantity
        - price

    OrderStatus:
      type: object
      description: Order status update
      properties:
        order_id:
          type: string
          description: Order ID
        status:
          type: string
          enum: [NEW, PROCESSING, SHIPPED, DELIVERED, CANCELLED]
          description: New status
        updated_at:
          type: string
          format: date-time
          description: Status update time
        comment:
          type: string
          description: Comment on status change
      required:
        - order_id
        - status
        - updated_at